{"version":3,"sources":["webpack:///./src/pages/dom-gen/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,wCACA,2DACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,iCAIL,uWAKA,iPAGA,mDACA,gIACoB,0BAAYA,WAAW,KAAvB,iBADpB,kBAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wFAML,4GAEA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,iCACnB,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBAApB,6CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,kBAApB,yCAGJ,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,+BACnB,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,sDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,sDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,eAApB,0DAIN,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wSAoBL,mCAAkB,0BAAYA,WAAW,KAAvB,aAAlB,qCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2GAML,gEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ybA8BL,yCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oRAUL,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,2HACqD,0BAAYA,WAAW,KAAvB,OADrD,4BAEO,0BAAYA,WAAW,KAAvB,KAFP,KAGA,wHAEA,mEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yUAgBL,oHAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,oQAYL,qBAAG,sBAAQA,WAAW,KAAnB,+CACH,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,yHAGF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,kGAIJ,+CACA,8CAA6B,0BAAYA,WAAW,KAAvB,aAA7B,gMAGA,0CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gEAIL,8BAAa,0BAAYA,WAAW,KAAvB,MAAb,yCAAqG,0BAAYA,WAAW,KAAvB,iBAArG,wCAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0GAML,sDAAqC,0BAAYA,WAAW,KAAvB,iBAArC,2BACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6FAML,6CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gIASL,2CACA,oNAE+B,0BAAYA,WAAW,KAAvB,gBAF/B,KAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qEAIL,wHACkB,0BAAYA,WAAW,KAAvB,mCADlB,qBACmH,0BAAYA,WAAW,KAAvB,QADnH,4BAEqB,0BAAYA,WAAW,KAAvB,QAFrB,KAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yNAaL,8BACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wBAIL,iCACA,2DAA0C,+BAAGA,WAAW,KAAQ,CAC5D,KAAQ,2EAD8B,qBAO9CJ,EAAWK,gBAAiB","file":"component---src-pages-dom-gen-index-md-3c3e7ce8d10d9b0b4ee6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/projects/js/published/dflex/site/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`@dflex/dom-gen`}</h1>\n    <p>{`DOM relations generator algorithm.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @dflex/dom-gen\n`}</code></pre>\n    <p>{`Generates relations between DOM elements based on element depth. For each DOM\nnode, it generates three keys: Siblings, Parent and Children keys and two\nindexes one refers to node order in its level and the other refers to the parent\nindex in parental level. Together: keys and indexes combined form of\nuniqueness for each element.`}</p>\n    <p>{`In case you are dealing with any DOM-tree, you can build entire branches and traverse\nthrough them using these generated unique keys and indexes. Think of relational\ndatabase or hash tables but applied in DOM tree.`}</p>\n    <h2>{`Generates element pointer`}</h2>\n    <p>{`Element pointer refers to the element position and its relationship in DOM tree.\nIt's represented with `}<inlineCode parentName=\"p\">{`getElmPointer`}</inlineCode>{` as following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const domGen = new Generator()\n\ndomGen.getElmPointer(id: string, depth: number)\n`}</code></pre>\n    <p>{`Returns pointer object refers to element relation with its keys and related\nindex:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`order: Object <elementOrder>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`self: number`}</inlineCode>{` - Element self index among its siblings.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`parent: number`}</inlineCode>{` - Parent index among its siblings.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`keys: Object <relationKey>`}</inlineCode></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sK: string`}</inlineCode>{` - Siblings Key, connects nodes in the same level.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pK: string`}</inlineCode>{` - Parent key, connects nodes in the higher level.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`chK: string`}</inlineCode>{` - Children Key, connects nodes in the lower level.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Generator from \"@dflex/dom-gen\";\n\nconst domGen = new Generator();\n\nlet pointer = domGen.getElmPointer(\"id-0\", 0);\n\n// pointer = {\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   order: {\n//     parent: 0,\n//     self: 0,\n//   },\n// };\n`}</code></pre>\n    <p>{`Internally `}<inlineCode parentName=\"p\">{`Generator`}</inlineCode>{` has build dom tree as following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`DOM-root\n│\n│───id-0 => order: { parent: 0, self: 0 } || keys: { chK: null , pK: \"1-0\", sK: \"0-0\" }\n`}</code></pre>\n    <p>{`Adding more elements on the same level:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const pointer1 = domGen.getElmPointer(\"id-1\", 0);\n\n// pointer1 = {\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   order: {\n//     parent: 0,\n//     self: 1,\n//   },\n// };\n\nconst pointer2 = domGen.getElmPointer(\"id-2\", 0);\n\n// pointer2 = {\n//   keys: {\n//     chK: null,\n//     pK: \"1-0\",\n//     sK: \"0-0\",\n//   },\n//   order: {\n//     parent: 0,\n//     self: 2,\n//   },\n// };\n`}</code></pre>\n    <p>{`And dom tree is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`DOM-root\n│\n│───id-0 => order: {parent: 0, self: 0} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n│\n│───id-1 => order: {parent: 0, self: 1} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n│\n│───id-2 => order: {parent: 0, self: 2} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` ids form 0 to 2, all have same parent and siblings key. And it\nguarantees that any any incoming parent will carry key `}<inlineCode parentName=\"p\">{`1-0`}</inlineCode>{` and exists in\nposition `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`.`}</p>\n    <p>{`This goes also for any parent. Eventually, by using keys and indexes you can go up↑\nand down↓.`}</p>\n    <p>{`Following the same logic we can go deeper:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const pointer = domGen.getElmPointer(\"id-parent-1\", 1);\n\n// pointer = {\n//   keys: {\n//     chK: \"0-0\",\n//     pK: \"2-0\",\n//     sK: \"1-0\", // this key was generated previously in children level.\n//   },\n//   order: {\n//     parent: 0, // all children aware of their parent index.\n//     self: 0,\n//   },\n// };\n`}</code></pre>\n    <p>{`Changing the depth identifies new level. Take a look at current dom tree that we\nnow have:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`DOM-root\n├───id-parent-1  => order: {parent: 0, self: 0} || keys: {chK: \"0-0\", pK: \"2-0\", sK: \"1-0\"}\n    |\n    │───id-0  => order: {parent: 0, self: 0} || keys: {chK: null, pK: \"1-0\", sK: \"0-0\"}\n    │\n    │───id-1 => ..\n    │\n    │───id-2 => ..\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Take into consideration some major points:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It works both ascending and descending. So, it doesn't care how nodes are\nmounted and it works with async mounting.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It automatically attaches the tree and links each node to the suitable parent\nand siblings.`}</p>\n      </li>\n    </ul>\n    <h2>{`Dealing with branches`}</h2>\n    <p>{`Despite the fact that `}<inlineCode parentName=\"p\">{`Generator`}</inlineCode>{` is not DOM store, it maintains some kind of\ndata to keep generate unique pointers. Every incoming node element belong to\nbranch contains all input ids distrusted by depth/level entries.`}</p>\n    <h3>{`Getting branches`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`domGen.getElmBranch(sk: string) : string<id> | Array<ids>\n`}</code></pre>\n    <p>{`where `}<inlineCode parentName=\"p\">{`sk`}</inlineCode>{` represents siblings key generated by `}<inlineCode parentName=\"p\">{`getElmPointer`}</inlineCode>{`. Going back to\nour generated tree:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const branchChildren = domGen.getElmBranch(\"0-0\");\n\n// branchChildren = [\"id-0\", \"id-1\", \"id-2\"];\n`}</code></pre>\n    <p>{`Since we have only one parent `}<inlineCode parentName=\"p\">{`branchParents`}</inlineCode>{` contain one node only:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const branchParents = domGen.getElmBranch(\"1-0\");\n\n// branchParents = \"id-parent-1\";\n`}</code></pre>\n    <p>{`To get all branches:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { branches } = domGen;\n\n// branches = {\n//   \"0-0\": [\"id-0\", \"id-1\", \"id-2\"],\n//   \"1-0\": \"id-parent-1\",\n// };\n`}</code></pre>\n    <h3>{`Updating branches`}</h3>\n    <p>{`There's no point in having DOM treemap without the ability to update it\naccording to some logic you've already implemented in your app. Following common\nsense, you can do it easily with `}<inlineCode parentName=\"p\">{`setElmBranch`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`domGen.setElmBranch(sk: string, branch: string<id>|Array<ids>)\n`}</code></pre>\n    <p>{`Let's continue working on our branches by switching the order of children.\nCurrently, we have: `}<inlineCode parentName=\"p\">{`\"0-0\": [\"id-0\", \"id-1\", \"id-2\"]`}</inlineCode>{` but element with `}<inlineCode parentName=\"p\">{`id-1`}</inlineCode>{`\nhas been switched with `}<inlineCode parentName=\"p\">{`id-2`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { branches } = domGen;\n\nconst newBranch = [\"id-0\", \"id-2\", \"id-1\"];\n\ndomGen.setElmBranch(\"0-0\", newBranch);\n\n// branches = {\n//   \"0-0\": [\"id-0\", \"id-2\", \"id-1\"],\n//   \"1-0\": \"id-parent-1\",\n// };\n`}</code></pre>\n    <h2>{`Test`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn test dom-gen\n`}</code></pre>\n    <h2>{`License`}</h2>\n    <p>{`This package is licensed under the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jalal246/dflex/tree/master/packages/dom-gen/LICENSE\"\n      }}>{`GPL-3.0 License`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}